
SensoriAltezzaTerra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d58  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003e68  08003e68  00004e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e90  08003e90  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e90  08003e90  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e90  08003e90  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e90  08003e90  00004e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e94  08003e94  00004e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003ea4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003ea4  00005108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a23  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a1  00000000  00000000  0000ca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0000e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000634  00000000  00000000  0000eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293ce  00000000  00000000  0000f154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aec3  00000000  00000000  00038522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f19b  00000000  00000000  000433e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022bc  00000000  00000000  000c25c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000c4880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e50 	.word	0x08003e50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003e50 	.word	0x08003e50

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000f7a:	4a19      	ldr	r2, [pc, #100]	@ (8000fe0 <MX_CAN_Init+0x6c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000f80:	2206      	movs	r2, #6
 8000f82:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000f8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000f90:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000f94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f98:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000f9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fa0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_CAN_Init+0x68>)
 8000fc8:	f000 fd44 	bl	8001a54 <HAL_CAN_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000fd2:	f000 fc29 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000028 	.word	0x20000028
 8000fe0:	40006400 	.word	0x40006400

08000fe4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <HAL_CAN_MspInit+0x8c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d131      	bne.n	8001068 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_CAN_MspInit+0x90>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <HAL_CAN_MspInit+0x90>)
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100e:	61d3      	str	r3, [r2, #28]
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_CAN_MspInit+0x90>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_CAN_MspInit+0x90>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <HAL_CAN_MspInit+0x90>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_CAN_MspInit+0x90>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001034:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001038:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <HAL_CAN_MspInit+0x94>)
 800104a:	f001 f801 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800104e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <HAL_CAN_MspInit+0x94>)
 8001064:	f000 fff4 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40006400 	.word	0x40006400
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <MX_GPIO_Init+0xa8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a23      	ldr	r2, [pc, #140]	@ (8001124 <MX_GPIO_Init+0xa8>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_GPIO_Init+0xa8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010ae:	f043 0320 	orr.w	r3, r3, #32
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_GPIO_Init+0xa8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_G_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <MX_GPIO_Init+0xac>)
 80010f8:	f001 f926 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin|LED_B_Pin;
 80010fc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2302      	movs	r3, #2
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <MX_GPIO_Init+0xac>)
 8001116:	f000 ff9b 	bl	8002050 <HAL_GPIO_Init>

}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40011000 	.word	0x40011000

0800112c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_I2C1_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	@ (8001180 <MX_I2C1_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_I2C1_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <MX_I2C1_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_I2C1_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <MX_I2C1_Init+0x50>)
 800116a:	f001 f91f 	bl	80023ac <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 fb58 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000050 	.word	0x20000050
 8001180:	40005400 	.word	0x40005400
 8001184:	000186a0 	.word	0x000186a0

08001188 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001218 <HAL_I2C_MspInit+0x90>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d133      	bne.n	8001210 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <HAL_I2C_MspInit+0x94>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <HAL_I2C_MspInit+0x94>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_I2C_MspInit+0x94>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c0:	23c0      	movs	r3, #192	@ 0xc0
 80011c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4812      	ldr	r0, [pc, #72]	@ (8001220 <HAL_I2C_MspInit+0x98>)
 80011d8:	f000 ff3a 	bl	8002050 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_I2C_MspInit+0x94>)
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <HAL_I2C_MspInit+0x94>)
 80011e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e6:	61d3      	str	r3, [r2, #28]
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <HAL_I2C_MspInit+0x94>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	23c0      	movs	r3, #192	@ 0xc0
 80011f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <HAL_I2C_MspInit+0x98>)
 800120c:	f000 ff20 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40005400 	.word	0x40005400
 800121c:	40021000 	.word	0x40021000
 8001220:	40010c00 	.word	0x40010c00
 8001224:	00000000 	.word	0x00000000

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b0a7      	sub	sp, #156	@ 0x9c
 800122c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f000 fb8b 	bl	8001948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 fab3 	bl	800179c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f7ff ff21 	bl	800107c <MX_GPIO_Init>
  MX_I2C1_Init();
 800123a:	f7ff ff77 	bl	800112c <MX_I2C1_Init>
  MX_CAN_Init();
 800123e:	f7ff fe99 	bl	8000f74 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  uint8_t addr[128] = {0x00};
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	227c      	movs	r2, #124	@ 0x7c
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fdd2 	bl	8003df8 <memset>

  for (uint8_t i = 0; i < 128; i++){
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800125a:	e01b      	b.n	8001294 <main+0x6c>
	  addr[i] = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 3, HAL_MAX_DELAY);
 800125c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001260:	b29b      	uxth	r3, r3
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	b299      	uxth	r1, r3
 8001266:	f897 4087 	ldrb.w	r4, [r7, #135]	@ 0x87
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	2203      	movs	r2, #3
 8001270:	488f      	ldr	r0, [pc, #572]	@ (80014b0 <main+0x288>)
 8001272:	f001 fd45 	bl	8002d00 <HAL_I2C_IsDeviceReady>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	f104 0388 	add.w	r3, r4, #136	@ 0x88
 800127e:	443b      	add	r3, r7
 8001280:	f803 2c84 	strb.w	r2, [r3, #-132]
	  HAL_Delay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f000 fbc1 	bl	8001a0c <HAL_Delay>
  for (uint8_t i = 0; i < 128; i++){
 800128a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800128e:	3301      	adds	r3, #1
 8001290:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001294:	f997 3087 	ldrsb.w	r3, [r7, #135]	@ 0x87
 8001298:	2b00      	cmp	r3, #0
 800129a:	dadf      	bge.n	800125c <main+0x34>
  }



  pHeader.DLC = 8; 						//give message size of 1 byte
 800129c:	4b85      	ldr	r3, [pc, #532]	@ (80014b4 <main+0x28c>)
 800129e:	2208      	movs	r2, #8
 80012a0:	611a      	str	r2, [r3, #16]
  pHeader.IDE = CAN_ID_STD; 			//set identifier to standard
 80012a2:	4b84      	ldr	r3, [pc, #528]	@ (80014b4 <main+0x28c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA; 			//set data type to remote transmission request?
 80012a8:	4b82      	ldr	r3, [pc, #520]	@ (80014b4 <main+0x28c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  pHeader.StdId = BOARD_CAN_ID; 		//define a standard identifier, used for message identification by filters (switch this for the other microcontroller)
 80012ae:	4b81      	ldr	r3, [pc, #516]	@ (80014b4 <main+0x28c>)
 80012b0:	f44f 7246 	mov.w	r2, #792	@ 0x318
 80012b4:	601a      	str	r2, [r3, #0]

  HAL_CAN_Start(&hcan);
 80012b6:	4880      	ldr	r0, [pc, #512]	@ (80014b8 <main+0x290>)
 80012b8:	f000 fcc7 	bl	8001c4a <HAL_CAN_Start>

  adsBuffer[0] = ADS_CONFIGURATION_REGISTER;
 80012bc:	4b7f      	ldr	r3, [pc, #508]	@ (80014bc <main+0x294>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
  adsBuffer[1] = 0b11000001; //MSB					//select ch0
 80012c2:	4b7e      	ldr	r3, [pc, #504]	@ (80014bc <main+0x294>)
 80012c4:	22c1      	movs	r2, #193	@ 0xc1
 80012c6:	705a      	strb	r2, [r3, #1]
  adsBuffer[2] = 0b10100011; //LSB
 80012c8:	4b7c      	ldr	r3, [pc, #496]	@ (80014bc <main+0x294>)
 80012ca:	22a3      	movs	r2, #163	@ 0xa3
 80012cc:	709a      	strb	r2, [r3, #2]

  HAL_Delay(1000);
 80012ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d2:	f000 fb9b 	bl	8001a0c <HAL_Delay>

  uint8_t pippo = HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDRESS, adsBuffer, 3, 100);
 80012d6:	2364      	movs	r3, #100	@ 0x64
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2303      	movs	r3, #3
 80012dc:	4a77      	ldr	r2, [pc, #476]	@ (80014bc <main+0x294>)
 80012de:	2192      	movs	r1, #146	@ 0x92
 80012e0:	4873      	ldr	r0, [pc, #460]	@ (80014b0 <main+0x288>)
 80012e2:	f001 f9a7 	bl	8002634 <HAL_I2C_Master_Transmit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

  if (pippo && 1)
 80012ec:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d03e      	beq.n	8001372 <main+0x14a>
  {
	  while(1)
	  {
		  static uint32_t millisLedBlink = 0;
		  if(millis >= millisLedBlink + 100 && pippo == HAL_ERROR)
 80012f4:	4b72      	ldr	r3, [pc, #456]	@ (80014c0 <main+0x298>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80012fc:	4b71      	ldr	r3, [pc, #452]	@ (80014c4 <main+0x29c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d816      	bhi.n	8001332 <main+0x10a>
 8001304:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001308:	2b01      	cmp	r3, #1
 800130a:	d112      	bne.n	8001332 <main+0x10a>
		  {
			  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800130c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001310:	486d      	ldr	r0, [pc, #436]	@ (80014c8 <main+0x2a0>)
 8001312:	f001 f831 	bl	8002378 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8001316:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800131a:	486b      	ldr	r0, [pc, #428]	@ (80014c8 <main+0x2a0>)
 800131c:	f001 f82c 	bl	8002378 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8001320:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001324:	4868      	ldr	r0, [pc, #416]	@ (80014c8 <main+0x2a0>)
 8001326:	f001 f827 	bl	8002378 <HAL_GPIO_TogglePin>

			  millisLedBlink = millis;
 800132a:	4b66      	ldr	r3, [pc, #408]	@ (80014c4 <main+0x29c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a64      	ldr	r2, [pc, #400]	@ (80014c0 <main+0x298>)
 8001330:	6013      	str	r3, [r2, #0]
		  }

		  if(millis >= millisLedBlink + 1000 && pippo == HAL_BUSY)
 8001332:	4b63      	ldr	r3, [pc, #396]	@ (80014c0 <main+0x298>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 800133a:	4b62      	ldr	r3, [pc, #392]	@ (80014c4 <main+0x29c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d8d8      	bhi.n	80012f4 <main+0xcc>
 8001342:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001346:	2b02      	cmp	r3, #2
 8001348:	d1d4      	bne.n	80012f4 <main+0xcc>
		  {
			  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 800134a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800134e:	485e      	ldr	r0, [pc, #376]	@ (80014c8 <main+0x2a0>)
 8001350:	f001 f812 	bl	8002378 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8001354:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001358:	485b      	ldr	r0, [pc, #364]	@ (80014c8 <main+0x2a0>)
 800135a:	f001 f80d 	bl	8002378 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800135e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001362:	4859      	ldr	r0, [pc, #356]	@ (80014c8 <main+0x2a0>)
 8001364:	f001 f808 	bl	8002378 <HAL_GPIO_TogglePin>

			  millisLedBlink = millis;
 8001368:	4b56      	ldr	r3, [pc, #344]	@ (80014c4 <main+0x29c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a54      	ldr	r2, [pc, #336]	@ (80014c0 <main+0x298>)
 800136e:	6013      	str	r3, [r2, #0]
	  {
 8001370:	e7c0      	b.n	80012f4 <main+0xcc>
		  }
	  }
  }

  HAL_Delay(50);
 8001372:	2032      	movs	r0, #50	@ 0x32
 8001374:	f000 fb4a 	bl	8001a0c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  static uint32_t millisAdcRead = 0;
	  if(millis >= millisAdcRead + 5) //200Hz sampling
 8001378:	4b54      	ldr	r3, [pc, #336]	@ (80014cc <main+0x2a4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	1d5a      	adds	r2, r3, #5
 800137e:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <main+0x29c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	f200 8143 	bhi.w	800160e <main+0x3e6>
	  {
		  static uint8_t sensorToggle = 0;

		  if(sensorToggle == 0)	//read ch0 = SENSOR 1 @ 100Hz
 8001388:	4b51      	ldr	r3, [pc, #324]	@ (80014d0 <main+0x2a8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f040 80af 	bne.w	80014f0 <main+0x2c8>
		  {
			  HAL_I2C_Mem_Read(&hi2c1, ADS_ADDRESS, ADS_CONVERSION_REGISTER, 1, adsBuffer, 2, 10);
 8001392:	230a      	movs	r3, #10
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	2302      	movs	r3, #2
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	4b48      	ldr	r3, [pc, #288]	@ (80014bc <main+0x294>)
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	2200      	movs	r2, #0
 80013a2:	2192      	movs	r1, #146	@ 0x92
 80013a4:	4842      	ldr	r0, [pc, #264]	@ (80014b0 <main+0x288>)
 80013a6:	f001 fa43 	bl	8002830 <HAL_I2C_Mem_Read>
			  adsReading1 = (adsBuffer[0] << 8 | adsBuffer[1]);
 80013aa:	4b44      	ldr	r3, [pc, #272]	@ (80014bc <main+0x294>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	4b42      	ldr	r3, [pc, #264]	@ (80014bc <main+0x294>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b45      	ldr	r3, [pc, #276]	@ (80014d4 <main+0x2ac>)
 80013be:	801a      	strh	r2, [r3, #0]
			  adsVread1 = adsReading1 * voltageConv;
 80013c0:	4b44      	ldr	r3, [pc, #272]	@ (80014d4 <main+0x2ac>)
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fb9a 	bl	8000b00 <__aeabi_i2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4942      	ldr	r1, [pc, #264]	@ (80014d8 <main+0x2b0>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fbe9 	bl	8000ba8 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b40      	ldr	r3, [pc, #256]	@ (80014dc <main+0x2b4>)
 80013dc:	601a      	str	r2, [r3, #0]

#if BOARD_ID == 1
			  adsVmod1 = map(adsVread1, 0.6373, 5.03679, 0.63637, 5.0617);		//taratura con AGILENT 34405A @ 03/05/2023
 80013de:	4b3f      	ldr	r3, [pc, #252]	@ (80014dc <main+0x2b4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f818 	bl	8000418 <__aeabi_f2d>
 80013e8:	a329      	add	r3, pc, #164	@ (adr r3, 8001490 <main+0x268>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7fe feb3 	bl	8000158 <__aeabi_dsub>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	a327      	add	r3, pc, #156	@ (adr r3, 8001498 <main+0x270>)
 80013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001400:	f7ff f862 	bl	80004c8 <__aeabi_dmul>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	a324      	add	r3, pc, #144	@ (adr r3, 80014a0 <main+0x278>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff f983 	bl	800071c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	a322      	add	r3, pc, #136	@ (adr r3, 80014a8 <main+0x280>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7fe fe9a 	bl	800015c <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fa5c 	bl	80008ec <__aeabi_d2f>
 8001434:	4603      	mov	r3, r0
 8001436:	4a2a      	ldr	r2, [pc, #168]	@ (80014e0 <main+0x2b8>)
 8001438:	6013      	str	r3, [r2, #0]
			  adsDistance1 = map(adsVmod1, 0, 5, 16, 120);
 800143a:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <main+0x2b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4929      	ldr	r1, [pc, #164]	@ (80014e4 <main+0x2bc>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fbb1 	bl	8000ba8 <__aeabi_fmul>
 8001446:	4603      	mov	r3, r0
 8001448:	4927      	ldr	r1, [pc, #156]	@ (80014e8 <main+0x2c0>)
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc60 	bl	8000d10 <__aeabi_fdiv>
 8001450:	4603      	mov	r3, r0
 8001452:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fa9e 	bl	8000998 <__addsf3>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <main+0x2c4>)
 8001462:	601a      	str	r2, [r3, #0]
#else
			  adsVmod1 = 0;
			  adsDistance1 = map(adsVread1, 0, 5, 16, 120);
#endif

			  adsBuffer[0] = ADS_CONFIGURATION_REGISTER;
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <main+0x294>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
			  adsBuffer[1] = 0b11010001; //MSB					//select ch1
 800146a:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <main+0x294>)
 800146c:	22d1      	movs	r2, #209	@ 0xd1
 800146e:	705a      	strb	r2, [r3, #1]
			  adsBuffer[2] = 0b10100011; //LSB
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <main+0x294>)
 8001472:	22a3      	movs	r2, #163	@ 0xa3
 8001474:	709a      	strb	r2, [r3, #2]

			  HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDRESS, adsBuffer, 3, 10);
 8001476:	230a      	movs	r3, #10
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2303      	movs	r3, #3
 800147c:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <main+0x294>)
 800147e:	2192      	movs	r1, #146	@ 0x92
 8001480:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <main+0x288>)
 8001482:	f001 f8d7 	bl	8002634 <HAL_I2C_Master_Transmit>

			  //adsBuffer[0] = 0x00;
			  //HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDRESS, adsBuffer, 1, 100);

			  sensorToggle = 1;
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <main+0x2a8>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e0bb      	b.n	8001606 <main+0x3de>
 800148e:	bf00      	nop
 8001490:	f837b4a2 	.word	0xf837b4a2
 8001494:	3fe464c2 	.word	0x3fe464c2
 8001498:	b52007dd 	.word	0xb52007dd
 800149c:	4011b389 	.word	0x4011b389
 80014a0:	e81450f0 	.word	0xe81450f0
 80014a4:	40119913 	.word	0x40119913
 80014a8:	9e44fa05 	.word	0x9e44fa05
 80014ac:	3fe45d24 	.word	0x3fe45d24
 80014b0:	20000050 	.word	0x20000050
 80014b4:	200000c8 	.word	0x200000c8
 80014b8:	20000028 	.word	0x20000028
 80014bc:	200000a4 	.word	0x200000a4
 80014c0:	200000f0 	.word	0x200000f0
 80014c4:	20000104 	.word	0x20000104
 80014c8:	40011000 	.word	0x40011000
 80014cc:	200000f4 	.word	0x200000f4
 80014d0:	200000f8 	.word	0x200000f8
 80014d4:	200000ac 	.word	0x200000ac
 80014d8:	3943a5e3 	.word	0x3943a5e3
 80014dc:	200000b0 	.word	0x200000b0
 80014e0:	200000b8 	.word	0x200000b8
 80014e4:	42d00000 	.word	0x42d00000
 80014e8:	40a00000 	.word	0x40a00000
 80014ec:	200000c0 	.word	0x200000c0
		  }
		  else					//read ch1 = SENSOR 2 @ 100Hz
		  {
			  HAL_I2C_Mem_Read(&hi2c1, ADS_ADDRESS, ADS_CONVERSION_REGISTER, 1, adsBuffer, 2, 10);
 80014f0:	230a      	movs	r3, #10
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	2302      	movs	r3, #2
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	4b91      	ldr	r3, [pc, #580]	@ (8001740 <main+0x518>)
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	2200      	movs	r2, #0
 8001500:	2192      	movs	r1, #146	@ 0x92
 8001502:	4890      	ldr	r0, [pc, #576]	@ (8001744 <main+0x51c>)
 8001504:	f001 f994 	bl	8002830 <HAL_I2C_Mem_Read>
			  adsReading2 = (adsBuffer[0] << 8 | adsBuffer[1]);
 8001508:	4b8d      	ldr	r3, [pc, #564]	@ (8001740 <main+0x518>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b8b      	ldr	r3, [pc, #556]	@ (8001740 <main+0x518>)
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b8b      	ldr	r3, [pc, #556]	@ (8001748 <main+0x520>)
 800151c:	801a      	strh	r2, [r3, #0]
			  adsVread2 = adsReading2 * voltageConv;
 800151e:	4b8a      	ldr	r3, [pc, #552]	@ (8001748 <main+0x520>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff faeb 	bl	8000b00 <__aeabi_i2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4987      	ldr	r1, [pc, #540]	@ (800174c <main+0x524>)
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fb3a 	bl	8000ba8 <__aeabi_fmul>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	4b85      	ldr	r3, [pc, #532]	@ (8001750 <main+0x528>)
 800153a:	601a      	str	r2, [r3, #0]

#if BOARD_ID == 1
			  adsVmod2 = map(adsVread2, 0.0987, 5.0053, 0.0990, 5.0295);	//taratura con AGILENT 34405A @ 03/05/2023
 800153c:	4b84      	ldr	r3, [pc, #528]	@ (8001750 <main+0x528>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ff69 	bl	8000418 <__aeabi_f2d>
 8001546:	a374      	add	r3, pc, #464	@ (adr r3, 8001718 <main+0x4f0>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe fe04 	bl	8000158 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	a371      	add	r3, pc, #452	@ (adr r3, 8001720 <main+0x4f8>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe ffb3 	bl	80004c8 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	a36f      	add	r3, pc, #444	@ (adr r3, 8001728 <main+0x500>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7ff f8d4 	bl	800071c <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	a36c      	add	r3, pc, #432	@ (adr r3, 8001730 <main+0x508>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe fdeb 	bl	800015c <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff f9ad 	bl	80008ec <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a6f      	ldr	r2, [pc, #444]	@ (8001754 <main+0x52c>)
 8001596:	6013      	str	r3, [r2, #0]
			  adsDistance2 = map(adsVmod2, 0, 5, 16, 120) - 0.09;
 8001598:	4b6e      	ldr	r3, [pc, #440]	@ (8001754 <main+0x52c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	496e      	ldr	r1, [pc, #440]	@ (8001758 <main+0x530>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb02 	bl	8000ba8 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	496d      	ldr	r1, [pc, #436]	@ (800175c <main+0x534>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fbb1 	bl	8000d10 <__aeabi_fdiv>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff f9ef 	bl	8000998 <__addsf3>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff2b 	bl	8000418 <__aeabi_f2d>
 80015c2:	a35d      	add	r3, pc, #372	@ (adr r3, 8001738 <main+0x510>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7fe fdc6 	bl	8000158 <__aeabi_dsub>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff f98a 	bl	80008ec <__aeabi_d2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a61      	ldr	r2, [pc, #388]	@ (8001760 <main+0x538>)
 80015dc:	6013      	str	r3, [r2, #0]
#else
			  adsVmod2 = 0;
			  adsDistance2 = map(adsVread2, 0, 5, 16, 120);					//taratura con AGILENT 34405A @ 03/05/2023
#endif

			  adsBuffer[0] = ADS_CONFIGURATION_REGISTER;
 80015de:	4b58      	ldr	r3, [pc, #352]	@ (8001740 <main+0x518>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
			  adsBuffer[1] = 0b11000001; //MSB					//select ch0
 80015e4:	4b56      	ldr	r3, [pc, #344]	@ (8001740 <main+0x518>)
 80015e6:	22c1      	movs	r2, #193	@ 0xc1
 80015e8:	705a      	strb	r2, [r3, #1]
			  adsBuffer[2] = 0b10100011; //LSB
 80015ea:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <main+0x518>)
 80015ec:	22a3      	movs	r2, #163	@ 0xa3
 80015ee:	709a      	strb	r2, [r3, #2]

			  HAL_I2C_Master_Transmit(&hi2c1, ADS_ADDRESS, adsBuffer, 3, 10);
 80015f0:	230a      	movs	r3, #10
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2303      	movs	r3, #3
 80015f6:	4a52      	ldr	r2, [pc, #328]	@ (8001740 <main+0x518>)
 80015f8:	2192      	movs	r1, #146	@ 0x92
 80015fa:	4852      	ldr	r0, [pc, #328]	@ (8001744 <main+0x51c>)
 80015fc:	f001 f81a 	bl	8002634 <HAL_I2C_Master_Transmit>

			  sensorToggle = 0;
 8001600:	4b58      	ldr	r3, [pc, #352]	@ (8001764 <main+0x53c>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
		  }

		  millisAdcRead = millis;
 8001606:	4b58      	ldr	r3, [pc, #352]	@ (8001768 <main+0x540>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a58      	ldr	r2, [pc, #352]	@ (800176c <main+0x544>)
 800160c:	6013      	str	r3, [r2, #0]
	  }



	  if(millis >= millisCanTransmission + canTrasmissionDelay)					//CAN data transmission
 800160e:	4b58      	ldr	r3, [pc, #352]	@ (8001770 <main+0x548>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1d5a      	adds	r2, r3, #5
 8001614:	4b54      	ldr	r3, [pc, #336]	@ (8001768 <main+0x540>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d85d      	bhi.n	80016d8 <main+0x4b0>
	  {
		  static uint16_t distance1_can = 0;
		  static uint16_t distance2_can = 0;

		  if(adsDistance1 != 0)
 800161c:	4b55      	ldr	r3, [pc, #340]	@ (8001774 <main+0x54c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f04f 0100 	mov.w	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fc53 	bl	8000ed0 <__aeabi_fcmpeq>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10d      	bne.n	800164c <main+0x424>
			  distance1_can = ((uint16_t) (adsDistance1 * 100));
 8001630:	4b50      	ldr	r3, [pc, #320]	@ (8001774 <main+0x54c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4950      	ldr	r1, [pc, #320]	@ (8001778 <main+0x550>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fab6 	bl	8000ba8 <__aeabi_fmul>
 800163c:	4603      	mov	r3, r0
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc78 	bl	8000f34 <__aeabi_f2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b4c      	ldr	r3, [pc, #304]	@ (800177c <main+0x554>)
 800164a:	801a      	strh	r2, [r3, #0]

		  if(adsDistance2 != 0)
 800164c:	4b44      	ldr	r3, [pc, #272]	@ (8001760 <main+0x538>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f04f 0100 	mov.w	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fc3b 	bl	8000ed0 <__aeabi_fcmpeq>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10d      	bne.n	800167c <main+0x454>
			  distance2_can = ((uint16_t) (adsDistance2 * 100));
 8001660:	4b3f      	ldr	r3, [pc, #252]	@ (8001760 <main+0x538>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4944      	ldr	r1, [pc, #272]	@ (8001778 <main+0x550>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa9e 	bl	8000ba8 <__aeabi_fmul>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc60 	bl	8000f34 <__aeabi_f2uiz>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b41      	ldr	r3, [pc, #260]	@ (8001780 <main+0x558>)
 800167a:	801a      	strh	r2, [r3, #0]

		  canTx[0] = distance1_can >> 8;
 800167c:	4b3f      	ldr	r3, [pc, #252]	@ (800177c <main+0x554>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <main+0x55c>)
 8001688:	701a      	strb	r2, [r3, #0]
		  canTx[1] = distance1_can;
 800168a:	4b3c      	ldr	r3, [pc, #240]	@ (800177c <main+0x554>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b3c      	ldr	r3, [pc, #240]	@ (8001784 <main+0x55c>)
 8001692:	705a      	strb	r2, [r3, #1]
		  canTx[2] = distance2_can >> 8;
 8001694:	4b3a      	ldr	r3, [pc, #232]	@ (8001780 <main+0x558>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	b29b      	uxth	r3, r3
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <main+0x55c>)
 80016a0:	709a      	strb	r2, [r3, #2]
		  canTx[3] = distance2_can;
 80016a2:	4b37      	ldr	r3, [pc, #220]	@ (8001780 <main+0x558>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <main+0x55c>)
 80016aa:	70da      	strb	r2, [r3, #3]

		  canTx[4] = 0;
 80016ac:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <main+0x55c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	711a      	strb	r2, [r3, #4]
		  canTx[5] = 0;
 80016b2:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <main+0x55c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	715a      	strb	r2, [r3, #5]
		  canTx[6] = 0;
 80016b8:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <main+0x55c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	719a      	strb	r2, [r3, #6]
		  canTx[7] = 0;
 80016be:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <main+0x55c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	71da      	strb	r2, [r3, #7]

		  HAL_CAN_AddTxMessage(&hcan, &pHeader, canTx, &TxMailbox);
 80016c4:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <main+0x560>)
 80016c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001784 <main+0x55c>)
 80016c8:	4930      	ldr	r1, [pc, #192]	@ (800178c <main+0x564>)
 80016ca:	4831      	ldr	r0, [pc, #196]	@ (8001790 <main+0x568>)
 80016cc:	f000 fb01 	bl	8001cd2 <HAL_CAN_AddTxMessage>
		  millisCanTransmission = millis;
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <main+0x540>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <main+0x548>)
 80016d6:	6013      	str	r3, [r2, #0]


	  if(1)
	  {
		  static uint32_t millisLedBlink = 0;
		  if(millis >= millisLedBlink + 500)
 80016d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <main+0x56c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <main+0x540>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f63f ae47 	bhi.w	8001378 <main+0x150>
		  {
			  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80016ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ee:	482a      	ldr	r0, [pc, #168]	@ (8001798 <main+0x570>)
 80016f0:	f000 fe42 	bl	8002378 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 80016f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016f8:	4827      	ldr	r0, [pc, #156]	@ (8001798 <main+0x570>)
 80016fa:	f000 fe3d 	bl	8002378 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80016fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001702:	4825      	ldr	r0, [pc, #148]	@ (8001798 <main+0x570>)
 8001704:	f000 fe38 	bl	8002378 <HAL_GPIO_TogglePin>

			  millisLedBlink = millis;
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <main+0x540>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <main+0x56c>)
 800170e:	6013      	str	r3, [r2, #0]
  {
 8001710:	e632      	b.n	8001378 <main+0x150>
 8001712:	bf00      	nop
 8001714:	f3af 8000 	nop.w
 8001718:	381d7dbf 	.word	0x381d7dbf
 800171c:	3fb94467 	.word	0x3fb94467
 8001720:	fdf3b645 	.word	0xfdf3b645
 8001724:	4013b8d4 	.word	0x4013b8d4
 8001728:	c01a36e3 	.word	0xc01a36e3
 800172c:	4013a05b 	.word	0x4013a05b
 8001730:	624dd2f2 	.word	0x624dd2f2
 8001734:	3fb95810 	.word	0x3fb95810
 8001738:	70a3d70a 	.word	0x70a3d70a
 800173c:	3fb70a3d 	.word	0x3fb70a3d
 8001740:	200000a4 	.word	0x200000a4
 8001744:	20000050 	.word	0x20000050
 8001748:	200000ae 	.word	0x200000ae
 800174c:	3943a5e3 	.word	0x3943a5e3
 8001750:	200000b4 	.word	0x200000b4
 8001754:	200000bc 	.word	0x200000bc
 8001758:	42d00000 	.word	0x42d00000
 800175c:	40a00000 	.word	0x40a00000
 8001760:	200000c4 	.word	0x200000c4
 8001764:	200000f8 	.word	0x200000f8
 8001768:	20000104 	.word	0x20000104
 800176c:	200000f4 	.word	0x200000f4
 8001770:	200000e4 	.word	0x200000e4
 8001774:	200000c0 	.word	0x200000c0
 8001778:	42c80000 	.word	0x42c80000
 800177c:	200000fa 	.word	0x200000fa
 8001780:	200000fc 	.word	0x200000fc
 8001784:	200000e8 	.word	0x200000e8
 8001788:	200000e0 	.word	0x200000e0
 800178c:	200000c8 	.word	0x200000c8
 8001790:	20000028 	.word	0x20000028
 8001794:	20000100 	.word	0x20000100
 8001798:	40011000 	.word	0x40011000

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b090      	sub	sp, #64	@ 0x40
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0318 	add.w	r3, r7, #24
 80017a6:	2228      	movs	r2, #40	@ 0x28
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fb24 	bl	8003df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80017c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ce:	2301      	movs	r3, #1
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d2:	2302      	movs	r3, #2
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017dc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	4618      	mov	r0, r3
 80017e8:	f001 fefe 	bl	80035e8 <HAL_RCC_OscConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80017f2:	f000 f819 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fa:	2302      	movs	r3, #2
 80017fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2102      	movs	r1, #2
 8001810:	4618      	mov	r0, r3
 8001812:	f002 f96b 	bl	8003aec <HAL_RCC_ClockConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800181c:	f000 f804 	bl	8001828 <Error_Handler>
  }
}
 8001820:	bf00      	nop
 8001822:	3740      	adds	r7, #64	@ 0x40
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <Error_Handler+0x8>

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_MspInit+0x5c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a14      	ldr	r2, [pc, #80]	@ (8001890 <HAL_MspInit+0x5c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_MspInit+0x5c>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <HAL_MspInit+0x5c>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <HAL_MspInit+0x5c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <HAL_MspInit+0x5c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_MspInit+0x60>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <HAL_MspInit+0x60>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <NMI_Handler+0x4>

080018a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <MemManage_Handler+0x4>

080018b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <UsageFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f874 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fe:	490d      	ldr	r1, [pc, #52]	@ (8001934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001914:	4c0a      	ldr	r4, [pc, #40]	@ (8001940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001922:	f7ff ffe5 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001926:	f002 fa6f 	bl	8003e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800192a:	f7ff fc7d 	bl	8001228 <main>
  bx lr
 800192e:	4770      	bx	lr
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001938:	08003e98 	.word	0x08003e98
  ldr r2, =_sbss
 800193c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001940:	20000108 	.word	0x20000108

08001944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC1_2_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <HAL_Init+0x28>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	@ (8001970 <HAL_Init+0x28>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 fb45 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	200f      	movs	r0, #15
 8001960:	f000 f808 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7ff ff66 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40022000 	.word	0x40022000

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_InitTick+0x54>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_InitTick+0x58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fb4f 	bl	8002036 <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00e      	b.n	80019c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d80a      	bhi.n	80019be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f000 fb25 	bl	8001ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b4:	4a06      	ldr	r2, [pc, #24]	@ (80019d0 <HAL_InitTick+0x5c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_IncTick+0x1c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_IncTick+0x20>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a03      	ldr	r2, [pc, #12]	@ (80019f4 <HAL_IncTick+0x20>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000104 	.word	0x20000104

080019f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b02      	ldr	r3, [pc, #8]	@ (8001a08 <HAL_GetTick+0x10>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000104 	.word	0x20000104

08001a0c <HAL_Delay>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
{
 8001a14:	f7ff fff0 	bl	80019f8 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t tickstart = HAL_GetTick();
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  if (wait < HAL_MAX_DELAY)
  {
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
    wait += (uint32_t)(uwTickFreq);
  }

 8001a32:	bf00      	nop
 8001a34:	f7ff ffe0 	bl	80019f8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  while ((HAL_GetTick() - tickstart) < wait)
  {
  }
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008

08001a54 <HAL_CAN_Init>:
  *         parameters in the CAN_InitStruct.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
{
  uint32_t tickstart;

  /* Check CAN handle */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_CAN_Init+0x12>
  if (hcan == NULL)
  {
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0ed      	b.n	8001c42 <HAL_CAN_Init+0x1ee>

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_CAN_Init+0x24>
  if (hcan->State == HAL_CAN_STATE_RESET)
  {
    /* Init the low level hardware: CLOCK, NVIC */
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fab6 	bl	8000fe4 <HAL_CAN_MspInit>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);

  /* Get tick */
 8001a88:	f7ff ffb6 	bl	80019f8 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]
  tickstart = HAL_GetTick();

  /* Wait initialisation acknowledge */
 8001a8e:	e012      	b.n	8001ab6 <HAL_CAN_Init+0x62>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
  {
 8001a90:	f7ff ffb2 	bl	80019f8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d90b      	bls.n	8001ab6 <HAL_CAN_Init+0x62>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
    {
      /* Update error code */
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;

      /* Change CAN state */
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2205      	movs	r2, #5
 8001aae:	f883 2020 	strb.w	r2, [r3, #32]
      hcan->State = HAL_CAN_STATE_ERROR;

 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0c5      	b.n	8001c42 <HAL_CAN_Init+0x1ee>
  /* Wait initialisation acknowledge */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0e5      	beq.n	8001a90 <HAL_CAN_Init+0x3c>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0202 	bic.w	r2, r2, #2
 8001ad2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);

  /* Get tick */
 8001ad4:	f7ff ff90 	bl	80019f8 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]
  tickstart = HAL_GetTick();

  /* Check Sleep mode leave acknowledge */
 8001ada:	e012      	b.n	8001b02 <HAL_CAN_Init+0xae>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
  {
 8001adc:	f7ff ff8c 	bl	80019f8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d90b      	bls.n	8001b02 <HAL_CAN_Init+0xae>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
    {
      /* Update error code */
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;

      /* Change CAN state */
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2205      	movs	r2, #5
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]
      hcan->State = HAL_CAN_STATE_ERROR;

 8001afe:	2301      	movs	r3, #1
 8001b00:	e09f      	b.n	8001c42 <HAL_CAN_Init+0x1ee>
  /* Check Sleep mode leave acknowledge */
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e5      	bne.n	8001adc <HAL_CAN_Init+0x88>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e1b      	ldrb	r3, [r3, #24]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d108      	bne.n	8001b2a <HAL_CAN_Init+0xd6>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
  {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <HAL_CAN_Init+0xe6>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
  }
  else
  {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b38:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
  }

  /* Set the automatic bus-off management */
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7e5b      	ldrb	r3, [r3, #25]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_CAN_Init+0x100>
  if (hcan->Init.AutoBusOff == ENABLE)
  {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e007      	b.n	8001b64 <HAL_CAN_Init+0x110>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
  }
  else
  {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b62:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
  }

  /* Set the automatic wake-up mode */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e9b      	ldrb	r3, [r3, #26]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d108      	bne.n	8001b7e <HAL_CAN_Init+0x12a>
  if (hcan->Init.AutoWakeUp == ENABLE)
  {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e007      	b.n	8001b8e <HAL_CAN_Init+0x13a>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
  }
  else
  {
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0220 	bic.w	r2, r2, #32
 8001b8c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
  }

  /* Set the automatic retransmission */
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7edb      	ldrb	r3, [r3, #27]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_CAN_Init+0x154>
  if (hcan->Init.AutoRetransmission == ENABLE)
  {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0210 	bic.w	r2, r2, #16
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e007      	b.n	8001bb8 <HAL_CAN_Init+0x164>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
  }
  else
  {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	601a      	str	r2, [r3, #0]
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
  }

  /* Set the receive FIFO locked mode */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7f1b      	ldrb	r3, [r3, #28]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d108      	bne.n	8001bd2 <HAL_CAN_Init+0x17e>
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
  {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0208 	orr.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e007      	b.n	8001be2 <HAL_CAN_Init+0x18e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
  }
  else
  {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0208 	bic.w	r2, r2, #8
 8001be0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
  }

  /* Set the transmit FIFO priority */
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7f5b      	ldrb	r3, [r3, #29]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_CAN_Init+0x1a8>
  if (hcan->Init.TransmitFifoPriority == ENABLE)
  {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0204 	orr.w	r2, r2, #4
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_CAN_Init+0x1b8>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
  }
  else
  {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
  }

  /* Set the bit timing register */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	ea42 0103 	orr.w	r1, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	1e5a      	subs	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.SyncJumpWidth  |
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;

  /* Initialize the CAN state */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
 8001c40:	2300      	movs	r3, #0
  return HAL_OK;
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_CAN_Start>:
/**
  * @brief  Start the CAN module.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d12e      	bne.n	8001cbc <HAL_CAN_Start+0x72>

  if (hcan->State == HAL_CAN_STATE_READY)
  {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);

 8001c76:	f7ff febf 	bl	80019f8 <HAL_GetTick>
 8001c7a:	60f8      	str	r0, [r7, #12]
    /* Get tick */
    tickstart = HAL_GetTick();

 8001c7c:	e012      	b.n	8001ca4 <HAL_CAN_Start+0x5a>
    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
    {
 8001c7e:	f7ff febb 	bl	80019f8 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b0a      	cmp	r3, #10
 8001c8a:	d90b      	bls.n	8001ca4 <HAL_CAN_Start+0x5a>
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
      {
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;

 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]
        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e012      	b.n	8001cca <HAL_CAN_Start+0x80>

 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e5      	bne.n	8001c7e <HAL_CAN_Start+0x34>

        return HAL_ERROR;
      }
    }

 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

 8001cb8:	2300      	movs	r3, #0
 8001cba:	e006      	b.n	8001cca <HAL_CAN_Start+0x80>
    /* Return function status */
    return HAL_OK;
  }
  else
  {
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cc8:	2301      	movs	r3, #1

    return HAL_ERROR;
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
 8001cd2:	b480      	push	{r7}
 8001cd4:	b089      	sub	sp, #36	@ 0x24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
{
  uint32_t transmitmailbox;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce6:	77fb      	strb	r3, [r7, #31]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d003      	beq.n	8001cfe <HAL_CAN_AddTxMessage+0x2c>
 8001cf6:	7ffb      	ldrb	r3, [r7, #31]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	f040 80b8 	bne.w	8001e6e <HAL_CAN_AddTxMessage+0x19c>
  if ((state == HAL_CAN_STATE_READY) ||
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <HAL_CAN_AddTxMessage+0x4c>
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    /* Check that all the Tx mailboxes are not full */
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a0 	beq.w	8001e5e <HAL_CAN_AddTxMessage+0x18c>
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	0e1b      	lsrs	r3, r3, #24
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	617b      	str	r3, [r7, #20]
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;

      /* Store the Tx mailbox */
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d907      	bls.n	8001d3e <HAL_CAN_AddTxMessage+0x6c>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;

      /* Set up the Id */
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
      if (pHeader->IDE == CAN_ID_STD)
      {
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e09e      	b.n	8001e7c <HAL_CAN_AddTxMessage+0x1aa>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
                                                           pHeader->RTR);
      }
      else
 8001d3e:	2201      	movs	r2, #1
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	601a      	str	r2, [r3, #0]
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10d      	bne.n	8001d6c <HAL_CAN_AddTxMessage+0x9a>
                                                           pHeader->RTR);
      }
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	055a      	lsls	r2, r3, #21

 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	68db      	ldr	r3, [r3, #12]
      }
 8001d5a:	68f9      	ldr	r1, [r7, #12]
 8001d5c:	6809      	ldr	r1, [r1, #0]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3318      	adds	r3, #24
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	440b      	add	r3, r1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e00f      	b.n	8001d8c <HAL_CAN_AddTxMessage+0xba>
      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);

      /* Set up the Transmit Global Time mode */
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	00da      	lsls	r2, r3, #3
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	689b      	ldr	r3, [r3, #8]
      /* Set up the Transmit Global Time mode */
 8001d76:	431a      	orrs	r2, r3
      {
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	68db      	ldr	r3, [r3, #12]
      /* Set up the Transmit Global Time mode */
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	6809      	ldr	r1, [r1, #0]
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d80:	431a      	orrs	r2, r3
      /* Set up the Transmit Global Time mode */
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3318      	adds	r3, #24
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	440b      	add	r3, r1
 8001d8a:	601a      	str	r2, [r3, #0]
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6819      	ldr	r1, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3318      	adds	r3, #24
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	601a      	str	r2, [r3, #0]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	7d1b      	ldrb	r3, [r3, #20]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d111      	bne.n	8001dcc <HAL_CAN_AddTxMessage+0xfa>
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3318      	adds	r3, #24
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	6811      	ldr	r1, [r2, #0]
 8001dbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3304      	adds	r3, #4
 8001dca:	601a      	str	r2, [r3, #0]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
                ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3307      	adds	r3, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	061a      	lsls	r2, r3, #24
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3306      	adds	r3, #6
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3305      	adds	r3, #5
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	4313      	orrs	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	3204      	adds	r2, #4
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	4610      	mov	r0, r2
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	6811      	ldr	r1, [r2, #0]
 8001df4:	ea43 0200 	orr.w	r2, r3, r0
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);

 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3303      	adds	r3, #3
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	061a      	lsls	r2, r3, #24
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	041b      	lsls	r3, r3, #16
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	7812      	ldrb	r2, [r2, #0]
 8001e24:	4610      	mov	r0, r2
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	6811      	ldr	r1, [r2, #0]
 8001e2a:	ea43 0200 	orr.w	r2, r3, r0
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	440b      	add	r3, r1
 8001e34:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e38:	601a      	str	r2, [r3, #0]
      return HAL_OK;
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3318      	adds	r3, #24
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	4413      	add	r3, r2
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	6811      	ldr	r1, [r2, #0]
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3318      	adds	r3, #24
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	440b      	add	r3, r1
 8001e58:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
    }
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e00e      	b.n	8001e7c <HAL_CAN_AddTxMessage+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e006      	b.n	8001e7c <HAL_CAN_AddTxMessage+0x1aa>
  }
}

/**
  * @brief  Abort transmission requests
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24
  *         the configuration information for the specified CAN.
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
 8001e7a:	2301      	movs	r3, #1
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3724      	adds	r7, #36	@ 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
	...

08001e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eba:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <__NVIC_SetPriorityGrouping+0x44>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	60d3      	str	r3, [r2, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed4:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0307 	and.w	r3, r3, #7
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff90 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff49 	bl	8001e88 <__NVIC_SetPriorityGrouping>

 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
 8002010:	f7ff ff5e 	bl	8001ed0 <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff90 	bl	8001f40 <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5f 	bl	8001eec <__NVIC_SetPriority>

 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
}
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffb0 	bl	8001fa4 <SysTick_Config>
 8002044:	4603      	mov	r3, r0
/**
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b08b      	sub	sp, #44	@ 0x2c
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002062:	e161      	b.n	8002328 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002064:	2201      	movs	r2, #1
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	429a      	cmp	r2, r3
 800207e:	f040 8150 	bne.w	8002322 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a97      	ldr	r2, [pc, #604]	@ (80022e4 <HAL_GPIO_Init+0x294>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d05e      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 800208c:	4a95      	ldr	r2, [pc, #596]	@ (80022e4 <HAL_GPIO_Init+0x294>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d875      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 8002092:	4a95      	ldr	r2, [pc, #596]	@ (80022e8 <HAL_GPIO_Init+0x298>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d058      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 8002098:	4a93      	ldr	r2, [pc, #588]	@ (80022e8 <HAL_GPIO_Init+0x298>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d86f      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 800209e:	4a93      	ldr	r2, [pc, #588]	@ (80022ec <HAL_GPIO_Init+0x29c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d052      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020a4:	4a91      	ldr	r2, [pc, #580]	@ (80022ec <HAL_GPIO_Init+0x29c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d869      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020aa:	4a91      	ldr	r2, [pc, #580]	@ (80022f0 <HAL_GPIO_Init+0x2a0>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04c      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020b0:	4a8f      	ldr	r2, [pc, #572]	@ (80022f0 <HAL_GPIO_Init+0x2a0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d863      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020b6:	4a8f      	ldr	r2, [pc, #572]	@ (80022f4 <HAL_GPIO_Init+0x2a4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d046      	beq.n	800214a <HAL_GPIO_Init+0xfa>
 80020bc:	4a8d      	ldr	r2, [pc, #564]	@ (80022f4 <HAL_GPIO_Init+0x2a4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d85d      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d82a      	bhi.n	800211c <HAL_GPIO_Init+0xcc>
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d859      	bhi.n	800217e <HAL_GPIO_Init+0x12e>
 80020ca:	a201      	add	r2, pc, #4	@ (adr r2, 80020d0 <HAL_GPIO_Init+0x80>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	0800214b 	.word	0x0800214b
 80020d4:	08002125 	.word	0x08002125
 80020d8:	08002137 	.word	0x08002137
 80020dc:	08002179 	.word	0x08002179
 80020e0:	0800217f 	.word	0x0800217f
 80020e4:	0800217f 	.word	0x0800217f
 80020e8:	0800217f 	.word	0x0800217f
 80020ec:	0800217f 	.word	0x0800217f
 80020f0:	0800217f 	.word	0x0800217f
 80020f4:	0800217f 	.word	0x0800217f
 80020f8:	0800217f 	.word	0x0800217f
 80020fc:	0800217f 	.word	0x0800217f
 8002100:	0800217f 	.word	0x0800217f
 8002104:	0800217f 	.word	0x0800217f
 8002108:	0800217f 	.word	0x0800217f
 800210c:	0800217f 	.word	0x0800217f
 8002110:	0800217f 	.word	0x0800217f
 8002114:	0800212d 	.word	0x0800212d
 8002118:	08002141 	.word	0x08002141
 800211c:	4a76      	ldr	r2, [pc, #472]	@ (80022f8 <HAL_GPIO_Init+0x2a8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002122:	e02c      	b.n	800217e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e029      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	3304      	adds	r3, #4
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e024      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	3308      	adds	r3, #8
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e01f      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	330c      	adds	r3, #12
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e01a      	b.n	8002180 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002152:	2304      	movs	r3, #4
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e013      	b.n	8002180 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002160:	2308      	movs	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	611a      	str	r2, [r3, #16]
          break;
 800216a:	e009      	b.n	8002180 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800216c:	2308      	movs	r3, #8
 800216e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	615a      	str	r2, [r3, #20]
          break;
 8002176:	e003      	b.n	8002180 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
          break;
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x130>
          break;
 800217e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2bff      	cmp	r3, #255	@ 0xff
 8002184:	d801      	bhi.n	800218a <HAL_GPIO_Init+0x13a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	e001      	b.n	800218e <HAL_GPIO_Init+0x13e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2bff      	cmp	r3, #255	@ 0xff
 8002194:	d802      	bhi.n	800219c <HAL_GPIO_Init+0x14c>
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_GPIO_Init+0x152>
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	3b08      	subs	r3, #8
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	210f      	movs	r1, #15
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80a9 	beq.w	8002322 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d0:	4b4a      	ldr	r3, [pc, #296]	@ (80022fc <HAL_GPIO_Init+0x2ac>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a49      	ldr	r2, [pc, #292]	@ (80022fc <HAL_GPIO_Init+0x2ac>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b47      	ldr	r3, [pc, #284]	@ (80022fc <HAL_GPIO_Init+0x2ac>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e8:	4a45      	ldr	r2, [pc, #276]	@ (8002300 <HAL_GPIO_Init+0x2b0>)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3d      	ldr	r2, [pc, #244]	@ (8002304 <HAL_GPIO_Init+0x2b4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00d      	beq.n	8002230 <HAL_GPIO_Init+0x1e0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3c      	ldr	r2, [pc, #240]	@ (8002308 <HAL_GPIO_Init+0x2b8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d007      	beq.n	800222c <HAL_GPIO_Init+0x1dc>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3b      	ldr	r2, [pc, #236]	@ (800230c <HAL_GPIO_Init+0x2bc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_GPIO_Init+0x1d8>
 8002224:	2302      	movs	r3, #2
 8002226:	e004      	b.n	8002232 <HAL_GPIO_Init+0x1e2>
 8002228:	2303      	movs	r3, #3
 800222a:	e002      	b.n	8002232 <HAL_GPIO_Init+0x1e2>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_GPIO_Init+0x1e2>
 8002230:	2300      	movs	r3, #0
 8002232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002234:	f002 0203 	and.w	r2, r2, #3
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	4093      	lsls	r3, r2
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002242:	492f      	ldr	r1, [pc, #188]	@ (8002300 <HAL_GPIO_Init+0x2b0>)
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800225c:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	492b      	ldr	r1, [pc, #172]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	43db      	mvns	r3, r3
 8002272:	4927      	ldr	r1, [pc, #156]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 8002274:	4013      	ands	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002284:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4921      	ldr	r1, [pc, #132]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002292:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	491d      	ldr	r1, [pc, #116]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 800229c:	4013      	ands	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022ac:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	4917      	ldr	r1, [pc, #92]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	4913      	ldr	r1, [pc, #76]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01f      	beq.n	8002314 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	490d      	ldr	r1, [pc, #52]	@ (8002310 <HAL_GPIO_Init+0x2c0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
 80022e0:	e01f      	b.n	8002322 <HAL_GPIO_Init+0x2d2>
 80022e2:	bf00      	nop
 80022e4:	10320000 	.word	0x10320000
 80022e8:	10310000 	.word	0x10310000
 80022ec:	10220000 	.word	0x10220000
 80022f0:	10210000 	.word	0x10210000
 80022f4:	10120000 	.word	0x10120000
 80022f8:	10110000 	.word	0x10110000
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	40010800 	.word	0x40010800
 8002308:	40010c00 	.word	0x40010c00
 800230c:	40011000 	.word	0x40011000
 8002310:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_GPIO_Init+0x2f4>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	43db      	mvns	r3, r3
 800231c:	4909      	ldr	r1, [pc, #36]	@ (8002344 <HAL_GPIO_Init+0x2f4>)
 800231e:	4013      	ands	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	3301      	adds	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	f47f ae96 	bne.w	8002064 <HAL_GPIO_Init+0x14>
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	372c      	adds	r7, #44	@ 0x2c
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40010400 	.word	0x40010400

08002348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002364:	e003      	b.n	800236e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	041a      	lsls	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	611a      	str	r2, [r3, #16]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43d9      	mvns	r1, r3
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	400b      	ands	r3, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	611a      	str	r2, [r3, #16]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_I2C_Init>:
      (+) Call the function HAL_I2C_DeInit() to restore the default configuration
          of the selected I2Cx peripheral.

@endverbatim
  * @{
  */
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

/**
  * @brief  Initializes the I2C according to the specified parameters
  *         in the I2C_InitTypeDef and initialize the associated handle.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_I2C_Init+0x12>
  *                the configuration information for the specified I2C.
  * @retval HAL status
 80023ba:	2301      	movs	r3, #1
 80023bc:	e12b      	b.n	8002616 <HAL_I2C_Init+0x26a>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_I2C_Init+0x2c>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */

 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fed8 	bl	8001188 <HAL_I2C_MspInit>
    if (hi2c->MspInitCallback == NULL)
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
    }
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	@ 0x24
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fe:	601a      	str	r2, [r3, #0]
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800240e:	601a      	str	r2, [r3, #0]
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002410:	f001 fcc0 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8002414:	60f8      	str	r0, [r7, #12]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a81      	ldr	r2, [pc, #516]	@ (8002620 <HAL_I2C_Init+0x274>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d807      	bhi.n	8002430 <HAL_I2C_Init+0x84>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a80      	ldr	r2, [pc, #512]	@ (8002624 <HAL_I2C_Init+0x278>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e006      	b.n	800243e <HAL_I2C_Init+0x92>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a7d      	ldr	r2, [pc, #500]	@ (8002628 <HAL_I2C_Init+0x27c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	bf94      	ite	ls
 8002438:	2301      	movls	r3, #1
 800243a:	2300      	movhi	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Init+0x9a>

  /*Reset I2C*/
 8002442:	2301      	movs	r3, #1
 8002444:	e0e7      	b.n	8002616 <HAL_I2C_Init+0x26a>
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;

  /* Get PCLK1 frequency */
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a78      	ldr	r2, [pc, #480]	@ (800262c <HAL_I2C_Init+0x280>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	60bb      	str	r3, [r7, #8]
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
  {
    return HAL_ERROR;
  }

 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a6a      	ldr	r2, [pc, #424]	@ (8002620 <HAL_I2C_Init+0x274>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d802      	bhi.n	8002480 <HAL_I2C_Init+0xd4>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	e009      	b.n	8002494 <HAL_I2C_Init+0xe8>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	4a69      	ldr	r2, [pc, #420]	@ (8002630 <HAL_I2C_Init+0x284>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	3301      	adds	r3, #1
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6213      	str	r3, [r2, #32]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	495c      	ldr	r1, [pc, #368]	@ (8002620 <HAL_I2C_Init+0x274>)
 80024b0:	428b      	cmp	r3, r1
 80024b2:	d819      	bhi.n	80024e8 <HAL_I2C_Init+0x13c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e59      	subs	r1, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c2:	1c59      	adds	r1, r3, #1
 80024c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024c8:	400b      	ands	r3, r1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_I2C_Init+0x138>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e59      	subs	r1, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e2:	e051      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e4:	2304      	movs	r3, #4
 80024e6:	e04f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <HAL_I2C_Init+0x168>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e012      	b.n	800253a <HAL_I2C_Init+0x18e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e58      	subs	r0, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	0099      	lsls	r1, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x196>
 800253e:	2301      	movs	r3, #1
 8002540:	e022      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10e      	bne.n	8002568 <HAL_I2C_Init+0x1bc>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1e58      	subs	r0, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	440b      	add	r3, r1
 8002558:	fbb0 f3f3 	udiv	r3, r0, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002566:	e00f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	6809      	ldr	r1, [r1, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	61cb      	str	r3, [r1, #28]
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6911      	ldr	r1, [r2, #16]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6093      	str	r3, [r2, #8]
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002614:	2300      	movs	r3, #0

 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	000186a0 	.word	0x000186a0
 8002624:	001e847f 	.word	0x001e847f
 8002628:	003d08ff 	.word	0x003d08ff
 800262c:	431bde83 	.word	0x431bde83
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_I2C_Master_Transmit>:

    (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
        (++) HAL_I2C_MasterTxCpltCallback()
        (++) HAL_I2C_MasterRxCpltCallback()
        (++) HAL_I2C_SlaveTxCpltCallback()
        (++) HAL_I2C_SlaveRxCpltCallback()
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	461a      	mov	r2, r3
 8002640:	460b      	mov	r3, r1
 8002642:	817b      	strh	r3, [r7, #10]
 8002644:	4613      	mov	r3, r2
 8002646:	813b      	strh	r3, [r7, #8]
        (++) HAL_I2C_MemTxCpltCallback()
        (++) HAL_I2C_MemRxCpltCallback()
 8002648:	f7ff f9d6 	bl	80019f8 <HAL_GetTick>
 800264c:	6178      	str	r0, [r7, #20]
        (++) HAL_I2C_AddrCallback()
        (++) HAL_I2C_ListenCpltCallback()
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b20      	cmp	r3, #32
 8002658:	f040 80e0 	bne.w	800281c <HAL_I2C_Master_Transmit+0x1e8>
        (++) HAL_I2C_ErrorCallback()
        (++) HAL_I2C_AbortCpltCallback()

 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2319      	movs	r3, #25
 8002662:	2201      	movs	r2, #1
 8002664:	4970      	ldr	r1, [pc, #448]	@ (8002828 <HAL_I2C_Master_Transmit+0x1f4>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fde2 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x42>
@endverbatim
  * @{
 8002672:	2302      	movs	r3, #2
 8002674:	e0d3      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
  */

/**
  * @brief  Transmits in master mode an amount of data in blocking mode.
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_I2C_Master_Transmit+0x50>
 8002680:	2302      	movs	r3, #2
 8002682:	e0cc      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @param  DevAddress Target device address: The device 7 bits address value
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d007      	beq.n	80026aa <HAL_I2C_Master_Transmit+0x76>
  *         in datasheet must be shifted to the left before calling the interface
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b8:	601a      	str	r2, [r3, #0]
{
  /* Init tickstart for timeout management*/
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2221      	movs	r2, #33	@ 0x21
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2210      	movs	r2, #16
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
  {
    /* Wait until BUSY flag is reset */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	893a      	ldrh	r2, [r7, #8]
 80026da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    {
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      return HAL_BUSY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a50      	ldr	r2, [pc, #320]	@ (800282c <HAL_I2C_Master_Transmit+0x1f8>)
 80026ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Process Locked */
 80026ec:	8979      	ldrh	r1, [r7, #10]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	6a3a      	ldr	r2, [r7, #32]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fc32 	bl	8002f5c <I2C_MasterRequestWrite>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Master_Transmit+0xce>
    __HAL_LOCK(hi2c);

 80026fe:	2301      	movs	r3, #1
 8002700:	e08d      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
    {
      /* Enable I2C peripheral */
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
      __HAL_I2C_ENABLE(hi2c);
    }
 8002718:	e066      	b.n	80027e8 <HAL_I2C_Master_Transmit+0x1b4>

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	6a39      	ldr	r1, [r7, #32]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fe5c 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <HAL_I2C_Master_Transmit+0x112>

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	2b04      	cmp	r3, #4
 8002730:	d107      	bne.n	8002742 <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;

 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002740:	601a      	str	r2, [r3, #0]
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
    hi2c->XferCount   = Size;
    hi2c->XferSize    = hi2c->XferCount;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;

 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	611a      	str	r2, [r3, #16]
    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    {
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24
      return HAL_ERROR;
    }

 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Clear ADDR flag */
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	@ 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b04      	cmp	r3, #4
 8002782:	d11b      	bne.n	80027bc <HAL_I2C_Master_Transmit+0x188>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d017      	beq.n	80027bc <HAL_I2C_Master_Transmit+0x188>
    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	625a      	str	r2, [r3, #36]	@ 0x24
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        }
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        return HAL_ERROR;
      }

      /* Write data to DR */
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	6a39      	ldr	r1, [r7, #32]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fe4c 	bl	800345e <I2C_WaitOnBTFFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <HAL_I2C_Master_Transmit+0x1b4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;

 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d107      	bne.n	80027e4 <HAL_I2C_Master_Transmit+0x1b0>
      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;

 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e2:	601a      	str	r2, [r3, #0]
      /* Update counter */
      hi2c->XferCount--;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e01a      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
    }
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d194      	bne.n	800271a <HAL_I2C_Master_Transmit+0xe6>
      hi2c->XferSize--;

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
      {
        /* Write data to DR */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fe:	601a      	str	r2, [r3, #0]
        hi2c->Instance->DR = *hi2c->pBuffPtr;

 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        /* Increment Buffer pointer */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->pBuffPtr++;

        /* Update counter */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        hi2c->XferCount--;
        hi2c->XferSize--;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281c:	2302      	movs	r3, #2
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	00100002 	.word	0x00100002
 800282c:	ffff0000 	.word	0xffff0000

08002830 <HAL_I2C_Mem_Read>:
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
  }
  else
  {
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	817b      	strh	r3, [r7, #10]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
    return HAL_BUSY;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  }
}

 800284e:	f7ff f8d3 	bl	80019f8 <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	@ 0x24
/**
  * @brief  Read an amount of data in blocking mode from a specific memory address
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @param  DevAddress Target device address: The device 7 bits address value
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	f040 8244 	bne.w	8002cea <HAL_I2C_Mem_Read+0x4ba>
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	4982      	ldr	r1, [pc, #520]	@ (8002a74 <HAL_I2C_Mem_Read+0x244>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fcdf 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Read+0x4c>
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
 8002878:	2302      	movs	r3, #2
 800287a:	e237      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_I2C_Mem_Read+0x5a>
 8002886:	2302      	movs	r3, #2
 8002888:	e230      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
{
  __IO uint32_t count = 0U;

 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d007      	beq.n	80028b0 <HAL_I2C_Mem_Read+0x80>
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();

 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028be:	601a      	str	r2, [r3, #0]
  {
    /* Wait until BUSY flag is reset */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2222      	movs	r2, #34	@ 0x22
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    {
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
      return HAL_BUSY;
    }

 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Process Locked */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_LOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	@ 0x28

 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a62      	ldr	r2, [pc, #392]	@ (8002a78 <HAL_I2C_Mem_Read+0x248>)
 80028f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
    {
 80028f2:	88f8      	ldrh	r0, [r7, #6]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fbac 	bl	8003060 <I2C_RequestMemoryRead>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_I2C_Mem_Read+0xe2>
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800290e:	2301      	movs	r3, #1
 8002910:	e1ec      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Disable Pos */
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002916:	2b00      	cmp	r3, #0
 8002918:	d113      	bne.n	8002942 <HAL_I2C_Mem_Read+0x112>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	69fb      	ldr	r3, [r7, #28]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e1c0      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x494>
    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	2b01      	cmp	r3, #1
 8002948:	d11e      	bne.n	8002988 <HAL_I2C_Mem_Read+0x158>
    hi2c->XferCount   = Size;
    hi2c->XferSize    = hi2c->XferCount;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002958:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800295a:	b672      	cpsid	i
}
 800295c:	bf00      	nop
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
      return HAL_ERROR;
    }

 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	69bb      	ldr	r3, [r7, #24]
    if (hi2c->XferSize == 0U)
    {
      /* Clear ADDR flag */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002984:	b662      	cpsie	i
}
 8002986:	e035      	b.n	80029f4 <HAL_I2C_Mem_Read+0x1c4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    }
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	2b02      	cmp	r3, #2
 800298e:	d11e      	bne.n	80029ce <HAL_I2C_Mem_Read+0x19e>
    else if (hi2c->XferSize == 1U)
    {
      /* Disable Acknowledge */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800299e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
}
 80029a2:	bf00      	nop

      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Generate Stop */
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029ca:	b662      	cpsie	i
}
 80029cc:	e012      	b.n	80029f4 <HAL_I2C_Mem_Read+0x1c4>
      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
    {
      /* Enable Pos */
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029dc:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);

 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	693b      	ldr	r3, [r7, #16]
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();
 80029f4:	e166      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x494>

      /* Clear ADDR flag */
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	f200 811f 	bhi.w	8002c3e <HAL_I2C_Mem_Read+0x40e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

      /* Disable Acknowledge */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d123      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x220>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

      /* Re-enable IRQs */
 8002a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fd67 	bl	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Mem_Read+0x1ec>
      __enable_irq();
    }
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e167      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    }
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24

    while (hi2c->XferSize > 0U)
    {
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      if (hi2c->XferSize <= 3U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a4e:	e139      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x494>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d152      	bne.n	8002afe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a5e:	2200      	movs	r2, #0
 8002a60:	4906      	ldr	r1, [pc, #24]	@ (8002a7c <HAL_I2C_Mem_Read+0x24c>)
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fbe4 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e13c      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
 8002a72:	bf00      	nop
 8002a74:	00100002 	.word	0x00100002
 8002a78:	ffff0000 	.word	0xffff0000
 8002a7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a80:	b672      	cpsid	i
}
 8002a82:	bf00      	nop
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;

 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a92:	601a      	str	r2, [r3, #0]
          /* Update counter */
          hi2c->XferSize--;
          hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          {
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ac6:	b662      	cpsie	i
}
 8002ac8:	bf00      	nop
            return HAL_ERROR;
          }

          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	@ 0x28

 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002afc:	e0e2      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x494>
          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;

          /* Update counter */
          hi2c->XferSize--;
          hi2c->XferCount--;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b04:	2200      	movs	r2, #0
 8002b06:	497b      	ldr	r1, [pc, #492]	@ (8002cf4 <HAL_I2C_Mem_Read+0x4c4>)
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fb91 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Mem_Read+0x2e8>

          /* Re-enable IRQs */
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0e9      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b28:	b672      	cpsid	i
}
 8002b2a:	bf00      	nop
          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;

          /* Update counter */
          hi2c->XferSize--;
          hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
        }
        /* 3 Last bytes */
        else
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          {
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
            return HAL_ERROR;
          }

 8002b5e:	4b66      	ldr	r3, [pc, #408]	@ (8002cf8 <HAL_I2C_Mem_Read+0x4c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	08db      	lsrs	r3, r3, #3
 8002b64:	4a65      	ldr	r2, [pc, #404]	@ (8002cfc <HAL_I2C_Mem_Read+0x4cc>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0a1a      	lsrs	r2, r3, #8
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00da      	lsls	r2, r3, #3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	623b      	str	r3, [r7, #32]
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	623b      	str	r3, [r7, #32]
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d118      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0x386>
             software sequence must complete before the current byte end of transfer */
          __disable_irq();
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	@ 0x30

 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          /* Read data from DR */
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ba6:	b662      	cpsie	i
}
 8002ba8:	bf00      	nop

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;

          /* Update counter */
          hi2c->XferSize--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          hi2c->XferCount--;

 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e09a      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
          do
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d1d9      	bne.n	8002b78 <HAL_I2C_Mem_Read+0x348>
          {
            count--;
            if (count == 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
              hi2c->State               = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]
              hi2c->Mode                = HAL_I2C_MODE_NONE;
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24
              /* Re-enable IRQs */
              __enable_irq();

 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
              /* Process Unlocked */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c06:	b662      	cpsie	i
}
 8002c08:	bf00      	nop
              __HAL_UNLOCK(hi2c);

              return HAL_ERROR;
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	@ 0x28

 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c3c:	e042      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x494>
          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;

          /* Update counter */
          hi2c->XferSize--;
          hi2c->XferCount--;
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fc4c 	bl	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Mem_Read+0x422>

          /* Re-enable IRQs */
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e04c      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
        }
      }
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d118      	bne.n	8002cc4 <HAL_I2C_Mem_Read+0x494>
      else
      {
        /* Wait until RXNE flag is set */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
        {
          return HAL_ERROR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Read data from DR */
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      __disable_irq();
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f47f ae94 	bne.w	80029f6 <HAL_I2C_Mem_Read+0x1c6>

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;

        /* Update counter */
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->XferCount--;

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        {
          if (hi2c->XferSize == 3U)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e000      	b.n	8002cec <HAL_I2C_Mem_Read+0x4bc>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
          }
 8002cea:	2302      	movs	r3, #2
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cec:	4618      	mov	r0, r3
 8002cee:	3728      	adds	r7, #40	@ 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	00010004 	.word	0x00010004
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	14f8b589 	.word	0x14f8b589

08002d00 <HAL_I2C_IsDeviceReady>:

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
    }

    return HAL_OK;
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	817b      	strh	r3, [r7, #10]
  }
  else
 8002d10:	f7fe fe72 	bl	80019f8 <HAL_GetTick>
 8002d14:	61f8      	str	r0, [r7, #28]
  {
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
    return HAL_BUSY;
  }
}

 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	f040 8111 	bne.w	8002f4a <HAL_I2C_IsDeviceReady+0x24a>
/**
  * @brief  Checks if target device is ready for communication.
  * @note   This function is used with Memory devices
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2319      	movs	r3, #25
 8002d2e:	2201      	movs	r2, #1
 8002d30:	4988      	ldr	r1, [pc, #544]	@ (8002f54 <HAL_I2C_IsDeviceReady+0x254>)
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa7c 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_IsDeviceReady+0x42>
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e104      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x24c>
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_I2C_IsDeviceReady+0x50>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0fd      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x24c>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d007      	beq.n	8002d76 <HAL_I2C_IsDeviceReady+0x76>
{
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
  uint32_t I2C_Trials = 0U;
  FlagStatus tmp1;
  FlagStatus tmp2;

 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d84:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
  {
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2224      	movs	r2, #36	@ 0x24
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    /* Wait until BUSY flag is reset */
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a70      	ldr	r2, [pc, #448]	@ (8002f58 <HAL_I2C_IsDeviceReady+0x258>)
 8002d98:	62da      	str	r2, [r3, #44]	@ 0x2c
    {
      return HAL_BUSY;
    }

    /* Process Locked */
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da8:	601a      	str	r2, [r3, #0]
    __HAL_LOCK(hi2c);

    /* Check if the I2C is already enabled */
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fa3a 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <HAL_I2C_IsDeviceReady+0xde>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
    {
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd0:	d103      	bne.n	8002dda <HAL_I2C_IsDeviceReady+0xda>
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0b6      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x24c>
    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dec:	611a      	str	r2, [r3, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;

    do
 8002dee:	f7fe fe03 	bl	80019f8 <HAL_GetTick>
 8002df2:	61f8      	str	r0, [r7, #28]
    {
      /* Generate Start */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	75fb      	strb	r3, [r7, #23]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	75bb      	strb	r3, [r7, #22]

 8002e22:	e025      	b.n	8002e70 <HAL_I2C_IsDeviceReady+0x170>
      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e24:	f7fe fde8 	bl	80019f8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d302      	bcc.n	8002e3a <HAL_I2C_IsDeviceReady+0x13a>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <HAL_I2C_IsDeviceReady+0x142>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22a0      	movs	r2, #160	@ 0xa0
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	75fb      	strb	r3, [r7, #23]
        }
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	75bb      	strb	r3, [r7, #22]

 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e7a:	d005      	beq.n	8002e88 <HAL_I2C_IsDeviceReady+0x188>
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <HAL_I2C_IsDeviceReady+0x188>
 8002e82:	7dbb      	ldrb	r3, [r7, #22]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0cd      	beq.n	8002e24 <HAL_I2C_IsDeviceReady+0x124>
        return HAL_TIMEOUT;
      }

 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);

 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d129      	bne.n	8002ef2 <HAL_I2C_IsDeviceReady+0x1f2>
      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eac:	601a      	str	r2, [r3, #0]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2319      	movs	r3, #25
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4921      	ldr	r1, [pc, #132]	@ (8002f54 <HAL_I2C_IsDeviceReady+0x254>)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f9ae 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_IsDeviceReady+0x1de>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e036      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x24c>
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Check if the ADDR flag has been set */
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e02c      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x24c>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);

 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f00:	601a      	str	r2, [r3, #0]
        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f0a:	615a      	str	r2, [r3, #20]
        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
        {
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2319      	movs	r3, #25
 8002f12:	2201      	movs	r2, #1
 8002f14:	490f      	ldr	r1, [pc, #60]	@ (8002f54 <HAL_I2C_IsDeviceReady+0x254>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f98a 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_IsDeviceReady+0x226>
          return HAL_ERROR;
        }
 8002f22:	2301      	movs	r3, #1
 8002f24:	e012      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x24c>

        hi2c->State = HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	61bb      	str	r3, [r7, #24]

        return HAL_OK;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f4ff af32 	bcc.w	8002d9a <HAL_I2C_IsDeviceReady+0x9a>
      }
      else
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Clear AF Flag */
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x24c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f4a:	2302      	movs	r3, #2
        {
          return HAL_ERROR;
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	00100002 	.word	0x00100002
 8002f58:	ffff0000 	.word	0xffff0000

08002f5c <I2C_MasterRequestWrite>:
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	817b      	strh	r3, [r7, #10]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
  {
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	617b      	str	r3, [r7, #20]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d006      	beq.n	8002f86 <I2C_MasterRequestWrite+0x2a>
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d003      	beq.n	8002f86 <I2C_MasterRequestWrite+0x2a>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f84:	d108      	bne.n	8002f98 <I2C_MasterRequestWrite+0x3c>
    hi2c->Mode          = HAL_I2C_MODE_NONE;

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e00b      	b.n	8002fb0 <I2C_MasterRequestWrite+0x54>
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	2b12      	cmp	r3, #18
 8002f9e:	d107      	bne.n	8002fb0 <I2C_MasterRequestWrite+0x54>
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fae:	601a      	str	r2, [r3, #0]

/**
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f937 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <I2C_MasterRequestWrite+0x88>
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd6:	d103      	bne.n	8002fe0 <I2C_MasterRequestWrite+0x84>
  * @retval HAL status
  */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e035      	b.n	8003050 <I2C_MasterRequestWrite+0xf4>
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;

 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fec:	d108      	bne.n	8003000 <I2C_MasterRequestWrite+0xa4>
  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
  {
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ffc:	611a      	str	r2, [r3, #16]
 8002ffe:	e01b      	b.n	8003038 <I2C_MasterRequestWrite+0xdc>
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
  {
 8003000:	897b      	ldrh	r3, [r7, #10]
 8003002:	11db      	asrs	r3, r3, #7
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0306 	and.w	r3, r3, #6
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f063 030f 	orn	r3, r3, #15
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
  }
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	490e      	ldr	r1, [pc, #56]	@ (8003058 <I2C_MasterRequestWrite+0xfc>)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f95d 	bl	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_MasterRequestWrite+0xd2>
  else
  {
 800302a:	2301      	movs	r3, #1
 800302c:	e010      	b.n	8003050 <I2C_MasterRequestWrite+0xf4>
    /* Do nothing */
  }

  /* Wait until SB flag is set */
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
    {
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4907      	ldr	r1, [pc, #28]	@ (800305c <I2C_MasterRequestWrite+0x100>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f94d 	bl	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_MasterRequestWrite+0xf2>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
    }
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <I2C_MasterRequestWrite+0xf4>
    return HAL_TIMEOUT;
  }

 800304e:	2300      	movs	r3, #0
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	00010008 	.word	0x00010008
 800305c:	00010002 	.word	0x00010002

08003060 <I2C_RequestMemoryRead>:

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
      {
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	817b      	strh	r3, [r7, #10]
 8003072:	460b      	mov	r3, r1
 8003074:	813b      	strh	r3, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
    }
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003098:	601a      	str	r2, [r3, #0]

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f8c2 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <I2C_RequestMemoryRead+0x6e>
  }

 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c0:	d103      	bne.n	80030ca <I2C_RequestMemoryRead+0x6a>
  return HAL_OK;
}
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40

/**
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0aa      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
  * @brief  Master sends target device address followed by internal memory address for read request.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @param  DevAddress Target device address: The device 7 bits address value
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030dc:	611a      	str	r2, [r3, #16]
  *         in datasheet must be shifted to the left before calling the interface
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	4952      	ldr	r1, [pc, #328]	@ (800322c <I2C_RequestMemoryRead+0x1cc>)
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f8fa 	bl	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <I2C_RequestMemoryRead+0x94>
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
 80030f0:	2301      	movs	r3, #1
 80030f2:	e097      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

 800310a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310c:	6a39      	ldr	r1, [r7, #32]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f964 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <I2C_RequestMemoryRead+0xd6>
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	2b04      	cmp	r3, #4
 8003120:	d107      	bne.n	8003132 <I2C_RequestMemoryRead+0xd2>

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003130:	601a      	str	r2, [r3, #0]
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003132:	2301      	movs	r3, #1
 8003134:	e076      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
    }
    return HAL_TIMEOUT;
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <I2C_RequestMemoryRead+0xe8>
  }

  /* Send slave address */
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	611a      	str	r2, [r3, #16]
 8003146:	e021      	b.n	800318c <I2C_RequestMemoryRead+0x12c>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
  {
    return HAL_ERROR;
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b29b      	uxth	r3, r3
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	611a      	str	r2, [r3, #16]
  }

  /* Clear ADDR flag */
 8003156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f93e 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <I2C_RequestMemoryRead+0x122>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <I2C_RequestMemoryRead+0x11e>
  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
  {
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317c:	601a      	str	r2, [r3, #0]
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    {
 800317e:	2301      	movs	r3, #1
 8003180:	e050      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    }
    return HAL_ERROR;
 8003182:	893b      	ldrh	r3, [r7, #8]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	611a      	str	r2, [r3, #16]
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800318c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318e:	6a39      	ldr	r1, [r7, #32]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f923 	bl	80033dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <I2C_RequestMemoryRead+0x158>
  {
    /* Send Memory Address */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d107      	bne.n	80031b4 <I2C_RequestMemoryRead+0x154>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
  }
  /* If Memory address size is 16Bit */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b2:	601a      	str	r2, [r3, #0]
  else
  {
 80031b4:	2301      	movs	r3, #1
 80031b6:	e035      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);

    /* Wait until TXE flag is set */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031c6:	601a      	str	r2, [r3, #0]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f82b 	bl	8003230 <I2C_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <I2C_RequestMemoryRead+0x19c>
      {
        /* Generate Stop */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ee:	d103      	bne.n	80031f8 <I2C_RequestMemoryRead+0x198>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
      }
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
    }
 80031f8:	2303      	movs	r3, #3
 80031fa:	e013      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
  }
 80031fc:	897b      	ldrh	r3, [r7, #10]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	b2da      	uxtb	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	611a      	str	r2, [r3, #16]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	4906      	ldr	r1, [pc, #24]	@ (800322c <I2C_RequestMemoryRead+0x1cc>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f863 	bl	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_RequestMemoryRead+0x1c2>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <I2C_RequestMemoryRead+0x1c4>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	2300      	movs	r3, #0
    }
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	00010002 	.word	0x00010002

08003230 <I2C_WaitOnFlagUntilTimeout>:
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
    {
      /* Renable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);

 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	71fb      	strb	r3, [r7, #7]
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003240:	e025      	b.n	800328e <I2C_WaitOnFlagUntilTimeout+0x5e>

      /* keep HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_NONE;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d021      	beq.n	800328e <I2C_WaitOnFlagUntilTimeout+0x5e>
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
 800324a:	f7fe fbd5 	bl	80019f8 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d116      	bne.n	800328e <I2C_WaitOnFlagUntilTimeout+0x5e>
    else
    {
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hi2c->ErrorCallback(hi2c);
#else
 800328a:	2301      	movs	r3, #1
 800328c:	e023      	b.n	80032d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10d      	bne.n	80032b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	e00c      	b.n	80032ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d0b6      	beq.n	8003242 <I2C_WaitOnFlagUntilTimeout+0x12>
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032d4:	2300      	movs	r3, #0

 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	603b      	str	r3, [r7, #0]
  /* Wait until flag is set */
 80032ec:	e051      	b.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fc:	d123      	bne.n	8003346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330c:	601a      	str	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003316:	615a      	str	r2, [r3, #20]
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f043 0204 	orr.w	r2, r3, #4
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e046      	b.n	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
        }
      }
    }
  }
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d021      	beq.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  return HAL_OK;
}
 800334e:	f7fe fb53 	bl	80019f8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d116      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>

/**
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	@ 0x30
  * @brief  This function handles I2C Communication Timeout for Master addressing phase.
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  *         the configuration information for I2C module
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	641a      	str	r2, [r3, #64]	@ 0x40
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  * @retval HAL status
  */
 800338e:	2301      	movs	r3, #1
 8003390:	e020      	b.n	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  /* Wait until flag is set */
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10c      	bne.n	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e00b      	b.n	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d18d      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
 80033d2:	2300      	movs	r3, #0
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_WaitOnTXEFlagUntilTimeout>:
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

      hi2c->PreviousState       = I2C_STATE_NONE;
      hi2c->State               = HAL_I2C_STATE_READY;
      hi2c->Mode                = HAL_I2C_MODE_NONE;
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]

 80033e8:	e02d      	b.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);

 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f8ce 	bl	800358c <I2C_IsAcknowledgeFailed>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
      return HAL_ERROR;
    }
 80033f6:	2301      	movs	r3, #1
 80033f8:	e02d      	b.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d021      	beq.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
 8003402:	f7fe faf9 	bl	80019f8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d116      	bne.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
        {
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->State               = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f043 0220 	orr.w	r2, r3, #32
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	641a      	str	r2, [r3, #64]	@ 0x40
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

          /* Process Unlocked */
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          __HAL_UNLOCK(hi2c);

 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>

 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003450:	2b80      	cmp	r3, #128	@ 0x80
 8003452:	d1ca      	bne.n	80033ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
          return HAL_ERROR;
        }
      }
    }
 8003454:	2300      	movs	r3, #0
  }
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 800346a:	e02d      	b.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
  {
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f88d 	bl	800358c <I2C_IsAcknowledgeFailed>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003478:	2301      	movs	r3, #1
 800347a:	e02d      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    {
      return HAL_ERROR;
    }

 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d021      	beq.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003484:	f7fe fab8 	bl	80019f8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	d302      	bcc.n	800349a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
      {
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        {
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40
          hi2c->PreviousState       = I2C_STATE_NONE;
          hi2c->State               = HAL_I2C_STATE_READY;
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d1ca      	bne.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);

          return HAL_ERROR;
 80034d6:	2300      	movs	r3, #0
        }
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
        hi2c->State               = HAL_I2C_STATE_READY;
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

 80034ec:	e042      	b.n	8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d119      	bne.n	8003530 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        return HAL_ERROR;
      }
    }
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0210 	mvn.w	r2, #16
 8003504:	615a      	str	r2, [r3, #20]
  }
  return HAL_OK;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
/**
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40
  * @brief  This function handles I2C Communication Timeout for specific usage of STOP request through Interrupt.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  * @retval HAL status
  */
 800352c:	2301      	movs	r3, #1
 800352e:	e029      	b.n	8003584 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
  __IO uint32_t count = 0U;

 8003530:	f7fe fa62 	bl	80019f8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
  do
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  {
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    count--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40
    if (count == 0U)
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>

 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	d1b5      	bne.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003582:	2300      	movs	r3, #0

 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_IsAcknowledgeFailed>:
/**
  * @brief  This function handles I2C Communication Timeout for specific usage of RXNE flag.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  * @retval HAL status
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a2:	d11b      	bne.n	80035dc <I2C_IsAcknowledgeFailed+0x50>
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035ac:	615a      	str	r2, [r3, #20]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    /* Check if a STOPF is detected */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f043 0204 	orr.w	r2, r3, #4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <I2C_IsAcknowledgeFailed+0x52>
      hi2c->State               = HAL_I2C_STATE_READY;
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	2300      	movs	r3, #0
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_RCC_OscConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  }

 80035f6:	2301      	movs	r3, #1
 80035f8:	e272      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8087 	beq.w	8003716 <HAL_RCC_OscConfig+0x12e>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
 8003608:	4b92      	ldr	r3, [pc, #584]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b04      	cmp	r3, #4
 8003612:	d00c      	beq.n	800362e <HAL_RCC_OscConfig+0x46>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	4b8f      	ldr	r3, [pc, #572]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d112      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
 8003620:	4b8c      	ldr	r3, [pc, #560]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362c:	d10b      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
      {
        return HAL_ERROR;
 800362e:	4b89      	ldr	r3, [pc, #548]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d06c      	beq.n	8003714 <HAL_RCC_OscConfig+0x12c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d168      	bne.n	8003714 <HAL_RCC_OscConfig+0x12c>
      }
    }
 8003642:	2301      	movs	r3, #1
 8003644:	e24c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);


 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x76>
 8003650:	4b80      	ldr	r3, [pc, #512]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7f      	ldr	r2, [pc, #508]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e02e      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b7b      	ldr	r3, [pc, #492]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7a      	ldr	r2, [pc, #488]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b78      	ldr	r3, [pc, #480]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a77      	ldr	r2, [pc, #476]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0xbc>
 800368a:	4b72      	ldr	r3, [pc, #456]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a71      	ldr	r2, [pc, #452]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b6f      	ldr	r3, [pc, #444]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6e      	ldr	r2, [pc, #440]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 80036a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b68      	ldr	r3, [pc, #416]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a67      	ldr	r2, [pc, #412]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ba:	6013      	str	r3, [r2, #0]
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
 80036c4:	f7fe f998 	bl	80019f8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036cc:	f7fe f994 	bl	80019f8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xf6>
          }
        }
 80036da:	2303      	movs	r3, #3
 80036dc:	e200      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036de:	4b5d      	ldr	r3, [pc, #372]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xe4>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is disabled */
 80036ec:	f7fe f984 	bl	80019f8 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036f4:	f7fe f980 	bl	80019f8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	@ 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x11e>
          }
        }
 8003702:	2303      	movs	r3, #3
 8003704:	e1ec      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003706:	4b53      	ldr	r3, [pc, #332]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x10c>
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
        return HAL_ERROR;
 8003714:	bf00      	nop
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d063      	beq.n	80037ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
 8003722:	4b4c      	ldr	r3, [pc, #304]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RCC_OscConfig+0x15e>
      /* When HSI is used as system clock it will not disabled */
 800372e:	4b49      	ldr	r3, [pc, #292]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b08      	cmp	r3, #8
 8003738:	d11c      	bne.n	8003774 <HAL_RCC_OscConfig+0x18c>
 800373a:	4b46      	ldr	r3, [pc, #280]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_RCC_OscConfig+0x18c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 8003746:	4b43      	ldr	r3, [pc, #268]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RCC_OscConfig+0x176>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x176>
      }
      /* Otherwise, just the calibration is allowed */
 800375a:	2301      	movs	r3, #1
 800375c:	e1c0      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
    }
 800375e:	4b3d      	ldr	r3, [pc, #244]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4939      	ldr	r1, [pc, #228]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
        return HAL_ERROR;
 8003772:	e03a      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_OscConfig+0x1d6>
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick */
 800377c:	4b36      	ldr	r3, [pc, #216]	@ (8003858 <HAL_RCC_OscConfig+0x270>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
 8003782:	f7fe f939 	bl	80019f8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800378a:	f7fe f935 	bl	80019f8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x1b4>
          }
        }
 8003798:	2303      	movs	r3, #3
 800379a:	e1a1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379c:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x1a2>

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
 80037a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4927      	ldr	r1, [pc, #156]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick */
 80037be:	4b26      	ldr	r3, [pc, #152]	@ (8003858 <HAL_RCC_OscConfig+0x270>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();

        /* Wait till HSI is disabled */
 80037c4:	f7fe f918 	bl	80019f8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037cc:	f7fe f914 	bl	80019f8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1f6>
          }
        }
 80037da:	2303      	movs	r3, #3
 80037dc:	e180      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037de:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x1e4>
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03a      	beq.n	800386c <HAL_RCC_OscConfig+0x284>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d019      	beq.n	8003832 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();

      /* Get Start Tick */
 80037fe:	4b17      	ldr	r3, [pc, #92]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
 8003804:	f7fe f8f8 	bl	80019f8 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800380c:	f7fe f8f4 	bl	80019f8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x236>
        }
      }
 800381a:	2303      	movs	r3, #3
 800381c:	e160      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x224>
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
    }
    else
 800382a:	2001      	movs	r0, #1
 800382c:	f000 fac6 	bl	8003dbc <RCC_Delay>
 8003830:	e01c      	b.n	800386c <HAL_RCC_OscConfig+0x284>
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();

      /* Get Start Tick */
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();

      /* Wait till LSI is disabled */
 8003838:	f7fe f8de 	bl	80019f8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383e:	e00f      	b.n	8003860 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003840:	f7fe f8da 	bl	80019f8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d908      	bls.n	8003860 <HAL_RCC_OscConfig+0x278>
        }
      }
 800384e:	2303      	movs	r3, #3
 8003850:	e146      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	42420000 	.word	0x42420000
 800385c:	42420480 	.word	0x42420480
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003860:	4b92      	ldr	r3, [pc, #584]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e9      	bne.n	8003840 <HAL_RCC_OscConfig+0x258>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a6 	beq.w	80039c6 <HAL_RCC_OscConfig+0x3de>

    /* Check the parameters */
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	4b8b      	ldr	r3, [pc, #556]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2be>
      pwrclkchanged = SET;
    }
 800388a:	4b88      	ldr	r3, [pc, #544]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4a87      	ldr	r2, [pc, #540]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003894:	61d3      	str	r3, [r2, #28]
 8003896:	4b85      	ldr	r3, [pc, #532]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]

 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
 80038a6:	4b82      	ldr	r3, [pc, #520]	@ (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_RCC_OscConfig+0x2fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);

      /* Wait for Backup domain Write protection disable */
 80038b2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038bc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	f7fe f89b 	bl	80019f8 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038c6:	f7fe f897 	bl	80019f8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	@ 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
        }
      }
 80038d4:	2303      	movs	r3, #3
 80038d6:	e103      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d8:	4b75      	ldr	r3, [pc, #468]	@ (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2de>
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x312>
 80038ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6213      	str	r3, [r2, #32]
 80038f8:	e02d      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x334>
 8003902:	4b6a      	ldr	r3, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a69      	ldr	r2, [pc, #420]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	4b67      	ldr	r3, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6213      	str	r3, [r2, #32]
 800391a:	e01c      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d10c      	bne.n	800393e <HAL_RCC_OscConfig+0x356>
 8003924:	4b61      	ldr	r3, [pc, #388]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a60      	ldr	r2, [pc, #384]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	4b5e      	ldr	r3, [pc, #376]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4a5d      	ldr	r2, [pc, #372]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6213      	str	r3, [r2, #32]
 800393c:	e00b      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 800393e:	4b5b      	ldr	r3, [pc, #364]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a5a      	ldr	r2, [pc, #360]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	4b58      	ldr	r3, [pc, #352]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a57      	ldr	r2, [pc, #348]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6213      	str	r3, [r2, #32]
    {
      /* Get Start Tick */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
 800395e:	f7fe f84b 	bl	80019f8 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003966:	f7fe f847 	bl	80019f8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x394>
        }
      }
 8003978:	2303      	movs	r3, #3
 800397a:	e0b1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	4b4b      	ldr	r3, [pc, #300]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCC_OscConfig+0x37e>
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
 800398a:	f7fe f835 	bl	80019f8 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003992:	f7fe f831 	bl	80019f8 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
        }
      }
 80039a4:	2303      	movs	r3, #3
 80039a6:	e09b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x3aa>
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3de>
    }
  }
 80039ba:	4b3c      	ldr	r3, [pc, #240]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4a3b      	ldr	r2, [pc, #236]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	61d3      	str	r3, [r2, #28]
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8087 	beq.w	8003ade <HAL_RCC_OscConfig+0x4f6>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d0:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d061      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x4b8>
      {
        /* Check the parameters */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d146      	bne.n	8003a72 <HAL_RCC_OscConfig+0x48a>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
 80039e4:	4b33      	ldr	r3, [pc, #204]	@ (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
 80039ea:	f7fe f805 	bl	80019f8 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039f2:	f7fe f801 	bl	80019f8 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x41c>
          }
        }
 8003a00:	2303      	movs	r3, #3
 8003a02:	e06d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	4b29      	ldr	r3, [pc, #164]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x40a>

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
        {
          /* Check the parameter */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a18:	d108      	bne.n	8003a2c <HAL_RCC_OscConfig+0x444>
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
        }

 8003a1a:	4b24      	ldr	r3, [pc, #144]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4921      	ldr	r1, [pc, #132]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a19      	ldr	r1, [r3, #32]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	491b      	ldr	r1, [pc, #108]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();

        /* Get Start Tick */
 8003a44:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
 8003a4a:	f7fd ffd5 	bl	80019f8 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a52:	f7fd ffd1 	bl	80019f8 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x47c>
          }
        }
 8003a60:	2303      	movs	r3, #3
 8003a62:	e03d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x46a>
 8003a70:	e035      	b.n	8003ade <HAL_RCC_OscConfig+0x4f6>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
 8003a72:	4b10      	ldr	r3, [pc, #64]	@ (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
 8003a78:	f7fd ffbe 	bl	80019f8 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a80:	f7fd ffba 	bl	80019f8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x4aa>
          }
        }
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e026      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a92:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x498>
 8003a9e:	e01e      	b.n	8003ade <HAL_RCC_OscConfig+0x4f6>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d107      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4d0>
      }
      else
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e019      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	42420060 	.word	0x42420060
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_RCC_OscConfig+0x500>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
        {
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x4f2>
          return HAL_ERROR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        {
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x4f6>
        }
      }
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
    }
  }

  return HAL_OK;
}

 8003ade:	2300      	movs	r3, #0
/**
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_RCC_ClockConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x14>
  }

 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d0      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 8003b00:	4b6a      	ldr	r3, [pc, #424]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);

    /* Check that the new number of wait states is taken into account to access the Flash
 8003b0e:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 0207 	bic.w	r2, r3, #7
 8003b16:	4965      	ldr	r1, [pc, #404]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
  {
    return HAL_ERROR;
 8003b1e:	4b63      	ldr	r3, [pc, #396]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x44>
  }
}
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x92>
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x68>
    }

 8003b48:	4b59      	ldr	r3, [pc, #356]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b52:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x80>
    }

 8003b60:	4b53      	ldr	r3, [pc, #332]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a52      	ldr	r2, [pc, #328]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b6a:	6053      	str	r3, [r2, #4]
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

 8003b6c:	4b50      	ldr	r3, [pc, #320]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d040      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x120>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8003b92:	4b47      	ldr	r3, [pc, #284]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      }
    }
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xce>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 8003baa:	4b41      	ldr	r3, [pc, #260]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      }
    }
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e073      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 8003bba:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      }
    }
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06b      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
 8003bca:	4b39      	ldr	r3, [pc, #228]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4936      	ldr	r1, [pc, #216]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bdc:	f7fd ff0c 	bl	80019f8 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be4:	f7fd ff08 	bl	80019f8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x10e>
      }
    }
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e053      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 020c 	and.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d1eb      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xf8>

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 8003c0c:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d210      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x150>
    __HAL_FLASH_SET_LATENCY(FLatency);

    /* Check that the new number of wait states is taken into account to access the Flash
 8003c1a:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 0207 	bic.w	r2, r3, #7
 8003c22:	4922      	ldr	r1, [pc, #136]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
  {
    return HAL_ERROR;
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x150>
  }
}
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x18e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
  }

 8003c66:	4b12      	ldr	r3, [pc, #72]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];

  /* Configure the source of time base considering new system clocks settings*/
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	490a      	ldr	r1, [pc, #40]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	5ccb      	ldrb	r3, [r1, r3]
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003c94:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_RCC_ClockConfig+0x1d0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd fe6a 	bl	8001974 <HAL_InitTick>
}

 8003ca0:	2300      	movs	r3, #0
/**
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40022000 	.word	0x40022000
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	08003e78 	.word	0x08003e78
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_GetSysClockFreq>:
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003cc0:	b490      	push	{r4, r7}
 8003cc2:	b08a      	sub	sp, #40	@ 0x28
 8003cc4:	af00      	add	r7, sp, #0
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003cc6:	4b29      	ldr	r3, [pc, #164]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0xac>)
 8003cc8:	1d3c      	adds	r4, r7, #4
 8003cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

 8003cd0:	f240 2301 	movw	r3, #513	@ 0x201
 8003cd4:	803b      	strh	r3, [r7, #0]
#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
 8003cea:	4b21      	ldr	r3, [pc, #132]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61fb      	str	r3, [r7, #28]
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d002      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x40>
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x46>
 8003cfe:	e02b      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x98>
    {
      sysclockfreq = HSE_VALUE;
      break;
    }
 8003d00:	4b1c      	ldr	r3, [pc, #112]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d02:	623b      	str	r3, [r7, #32]
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
 8003d04:	e02b      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x9e>
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
      {
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	0c9b      	lsrs	r3, r3, #18
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	3328      	adds	r3, #40	@ 0x28
 8003d10:	443b      	add	r3, r7
 8003d12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d16:	617b      	str	r3, [r7, #20]
#if defined(RCC_CFGR2_PREDIV1)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d012      	beq.n	8003d48 <HAL_RCC_GetSysClockFreq+0x88>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)
 8003d22:	4b13      	ldr	r3, [pc, #76]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	0c5b      	lsrs	r3, r3, #17
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	3328      	adds	r3, #40	@ 0x28
 8003d2e:	443b      	add	r3, r7
 8003d30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d34:	61bb      	str	r3, [r7, #24]
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4a0e      	ldr	r2, [pc, #56]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d3a:	fb03 f202 	mul.w	r2, r3, r2
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d46:	e004      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0x92>
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
      }
      sysclockfreq = pllclk;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
    }
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	623b      	str	r3, [r7, #32]
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
 8003d56:	e002      	b.n	8003d5e <HAL_RCC_GetSysClockFreq+0x9e>
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
 8003d58:	4b08      	ldr	r3, [pc, #32]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d5a:	623b      	str	r3, [r7, #32]
  }
 8003d5c:	bf00      	nop
  return sysclockfreq;
}

 8003d5e:	6a3b      	ldr	r3, [r7, #32]
/**
 8003d60:	4618      	mov	r0, r3
 8003d62:	3728      	adds	r7, #40	@ 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc90      	pop	{r4, r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	08003e68 	.word	0x08003e68
 8003d70:	40021000 	.word	0x40021000
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	003d0900 	.word	0x003d0900
 8003d7c:	007a1200 	.word	0x007a1200

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0

 8003d84:	4b02      	ldr	r3, [pc, #8]	@ (8003d90 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d86:	681b      	ldr	r3, [r3, #0]
/**
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
}

 8003d98:	f7ff fff2 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	@ (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
/**
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08003e88 	.word	0x08003e88

08003dbc <RCC_Delay>:
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
  do
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  {
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <RCC_Delay+0x34>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003df4 <RCC_Delay+0x38>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0a5b      	lsrs	r3, r3, #9
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	60fb      	str	r3, [r7, #12]
    __NOP();
  }
  while (Delay --);
 8003dd8:	bf00      	nop
}

 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1e5a      	subs	r2, r3, #1
 8003dde:	60fa      	str	r2, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f9      	bne.n	8003dd8 <RCC_Delay+0x1c>
/**
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	20000000 	.word	0x20000000
 8003df4:	10624dd3 	.word	0x10624dd3

08003df8 <memset>:
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4402      	add	r2, r0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <memset+0xa>
 8003e00:	4770      	bx	lr
 8003e02:	f803 1b01 	strb.w	r1, [r3], #1
 8003e06:	e7f9      	b.n	8003dfc <memset+0x4>

08003e08 <__libc_init_array>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	4d0c      	ldr	r5, [pc, #48]	@ (8003e40 <__libc_init_array+0x38>)
 8003e0e:	4c0d      	ldr	r4, [pc, #52]	@ (8003e44 <__libc_init_array+0x3c>)
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	42a6      	cmp	r6, r4
 8003e16:	d109      	bne.n	8003e2c <__libc_init_array+0x24>
 8003e18:	f000 f81a 	bl	8003e50 <_init>
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	4d0a      	ldr	r5, [pc, #40]	@ (8003e48 <__libc_init_array+0x40>)
 8003e20:	4c0a      	ldr	r4, [pc, #40]	@ (8003e4c <__libc_init_array+0x44>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	42a6      	cmp	r6, r4
 8003e28:	d105      	bne.n	8003e36 <__libc_init_array+0x2e>
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e30:	4798      	blx	r3
 8003e32:	3601      	adds	r6, #1
 8003e34:	e7ee      	b.n	8003e14 <__libc_init_array+0xc>
 8003e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3a:	4798      	blx	r3
 8003e3c:	3601      	adds	r6, #1
 8003e3e:	e7f2      	b.n	8003e26 <__libc_init_array+0x1e>
 8003e40:	08003e90 	.word	0x08003e90
 8003e44:	08003e90 	.word	0x08003e90
 8003e48:	08003e90 	.word	0x08003e90
 8003e4c:	08003e94 	.word	0x08003e94

08003e50 <_init>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr

08003e5c <_fini>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr
